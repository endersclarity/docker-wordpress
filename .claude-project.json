{
  "project_name": "docker-wordpress",
  "project_type": "containerized-wordpress-development",
  "version": "1.1.0",
  "created": "2024-12-28",
  "updated": "2025-01-25",
  "description": "Docker-based WordPress development environment with Claude Code and Browser MCP integration",
  
  "key_files": {
    "docker-compose.yml": "Container orchestration for WordPress and MySQL",
    "CLAUDE.md": "Claude Code integration and development guidelines", 
    "scripts/setup.sh": "Automated environment initialization script",
    "wp-content/": "WordPress themes, plugins, and uploads directory"
  },
  
  "modules": {
    "docker-infrastructure": "memory-bank/docker_infrastructure_module.md",
    "browser-automation": "memory-bank/browser_automation_module.md",
    "wordpress-development": "memory-bank/wordpress_development_module.md",
    "claude-integration": "memory-bank/claude_integration_module.md",
    "multi-instance": "memory-bank/multi_instance_module.md"
  },
  
  "implementation_plans": {
    "wordpress-automation": "memory-bank/implementation_plan_wordpress_automation.md",
    "theme-development": "memory-bank/implementation_plan_theme_development.md",
    "multi-instance": "memory-bank/implementation_plan_multi_instance.md"
  },
  
  "tasks": {
    "browser-mcp-test": "memory-bank/task_browser_mcp_test.md",
    "wordpress-install-automation": "memory-bank/task_wordpress_install_automation.md",
    "admin-config-automation": "memory-bank/task_admin_config_automation.md",
    "content-generation": "memory-bank/task_content_generation.md"
  },
  
  "system_manifest": "memory-bank/system_manifest.md",
  "roadmap": "memory-bank/project_roadmap.md",
  
  "development_commands": {
    "start": "docker-compose up -d",
    "stop": "docker-compose down", 
    "logs": "docker-compose logs -f",
    "shell": "docker-compose exec wordpress bash",
    "setup": "./scripts/setup.sh",
    "status": "docker-compose ps"
  },
  
  "ports": {
    "wordpress_base": 8090,
    "mysql_base": 3306
  },
  
  "technologies": [
    "Docker",
    "Docker Compose", 
    "WordPress",
    "MySQL",
    "Cursor IDE",
    "Claude Code",
    "Browser MCP",
    "MCP Servers"
  ],
  
  "mcp_servers": {
    "browsermcp": "npx @browsermcp/mcp",
    "desktop-commander": "npx @wonderwhy-er/desktop-commander@latest",
    "sequential-thinking": "npx @modelcontextprotocol/server-sequential-thinking",
    "exa": "npx -y exa-mcp-server",
    "youtube-transcript": "npx @kimtaeyoon83/mcp-server-youtube-transcript"
  },
  
  "load_sequence": [
    "/home/ender/.claude/CLAUDE.md",
    "./CLAUDE.md",
    "memory-bank/system_manifest.md",
    "activeContext.md",
    "memory-bank/project_roadmap.md",
    "memory-bank/docker_infrastructure_module.md",
    "memory-bank/browser_automation_module.md",
    "memory-bank/wordpress_development_module.md"
  ],
  
  "metadata": {
    "last_architect": "2025-01-25T19:45:00Z",
    "last_load": "2025-01-26T11:45:00Z",
    "last_sync": "2025-05-27T21:50:00Z",
    "session_accomplishments": [
      "✅ SEMANTIC SEARCH API DEPLOYED: Live search API with 458 Nevada County properties at http://172.22.206.209:5001",
      "✅ PERFORMANCE VERIFIED: Sub-millisecond response times (0.38-0.87ms) with real property data",
      "✅ FULL-STACK INTEGRATION: Disney cottage search UI connected to semantic search backend",
      "✅ USER SKEPTICISM ADDRESSED: Demonstrated working search with live property results and browser interface",
      "✅ API STANDARDIZATION: Aligned request/response formats between frontend and backend systems",
      "✅ HEALTH CHECK FIXES: Resolved IndexError in API health endpoint for empty property lists",
      "✅ WSL NETWORKING SETUP: Configured proper WSL IP access for Windows browser testing",
      "✅ REAL DATA VALIDATION: Confirmed search functionality with actual Nevada County property listings",
      "✅ TEST INTERFACE CREATED: Browser-based search interface for direct API testing and validation",
      "✅ PYTHON ENVIRONMENT: Virtual environment setup with Flask and Flask-CORS dependencies"
    ],
    "current_phase": "Semantic Search Integration Complete - Ready for WordPress Docker Integration",
    "next_priorities": [
      "Setup Docker Desktop WSL integration for WordPress environment",
      "Activate WordPress site with narissa-real-estate-theme",
      "Integrate cottage search UI within WordPress theme structure",
      "Connect semantic search API to WordPress frontend",
      "Configure production deployment with Docker Compose"
    ]
  },
  
  "sync_targets": {
    "active_context": "activeContext.md",
    "changelog": "changelog.md", 
    "progress_tracker": "memory-bank/project_roadmap.md",
    "system_manifest": "memory-bank/system_manifest.md"
  },
  
  "file_mappings": {
    "activeContext.md": "Current project state and session tracking",
    "changelog.md": "Complete log of changes and decisions",
    "CLAUDE.md": "Project-specific development guidelines",
    "memory-bank/system_manifest.md": "System architecture overview",
    "memory-bank/project_roadmap.md": "Project phases and milestones",
    "docker-compose.yml": "Container orchestration configuration",
    "scripts/setup.sh": "Environment initialization automation"
  }
}